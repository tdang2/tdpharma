== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

1. Setting up development system for webapp
 - Make sure your Mac finished install Xcode, Xcode C++ library, and Xcode command line
 - Make sure to finish set up your Mac with the this link: https://github.com/thoughtbot/laptop
 - Switch your Mac terminal shell to zsh if you have not already done that. Use this zshrc set up as an example
   https://gist.github.com/tdang2/6254daff16e833d475cb
 - To manage ruby version, we will use rbenv. If you finished thoughtbot laptop script, rbenv is already installed for
   you. You can start using rbenv to install the ruby version needed
 - By going through thoughtbot laptop script, homebrew is set up for you to install dependencies. Use homebrew to
   install the following tools
   + git-flow   for control of code versions
   + mongodb    for mongodb database (needed for angular-fullstack generator)
   + nvm        * highly recommended to install nvm to do version controll for npm libraries. This will take care of dependecies everything you upgrade node.js
 - Through nvm, install the following node dependencies
   + node.js
   + After that any npm install will be managed through nvm
 - Optional: Use homebrew to install brew-cask. Brew-cask has binary version of some of the useful tools that you can install such as atom

2. Setting up development system for mobile using ionic
 - Follow ionic setup website for the latest information

 * Configuration
  - You will need to set up a database.yml file which should be put under the project folder/config. An example of database.yml
    can be seen here: https://gist.github.com/tdang2/6254daff16e833d475cb
  - Beside the database.yml, we also need .env file to set environment variable for our app. The link above also contains
    an example of a .env file. Put the .env file right under the project folder
  - Once you set up the database, we need to set up ruby gem. Open terminal to the project folder, run
    + gem install bundler
    + bundle install

 * Database creation
  - Rails use rake task to manage database. We are using postgresql for rails app
  - For development, use:
    + rake db:create RAILS_ENV=development to create
    + rake db:migrate RAILS_ENV=development to build the tables for database. This command also update the database to the latest version
    + rake db:drop to remove the database
    + rake db:seed to create some seed data defined in seed.rb

3. Database initialization

4. Upgrade postgresql to a new major version
 - Assuming you install postgresql through homebrew
 - Turning postgresql off just in case: 
   $ launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
 - Upgrade postgresql through homebrew if you have not done so already
   $ brew update && brew upgrade postgresql
 - Create a new pristine database with a new version. In this case, postgres9.5
   $ initdb /usr/local/var/postgres9.5 -E utf8
 - Upgrade the old database to the new one. In this case, I have 9.4.5 as the old data structure to be replaced with the database we just created. Similarly, applied the same for the actual data
   $ pg_upgrade \
   -d /usr/local/var/postgres \
   -D /usr/local/var/postgres9.5 \
   -b /usr/local/Cellar/postgresql/9.4.5/bin/ \
   -B /usr/local/Cellar/postgresql/9.5.1/bin/ \
   -v
 - Move 9.5 data directory back to where PostgreSQL expects it to be
   $ mv /usr/local/var/postgres /usr/local/var/postgres9.4
   $ mv /usr/local/var/postgres9.5 /usr/local/var/postgres
 - Start PostgreSQL back up
   $ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
 - Recompile pg gem
   $ gem uninstall pg
   $ gem install pg

5. How to run the test suite
 - We use rspec to run rails test. By setting up bundle install correctly you can start using rspec folder to test

6. Services (job queues, cache servers, search engines, etc.)

7. Deployment instructions

8. Current supported api calls. Refer to trello tdpos for more detailed for each end point. To get the latest routes, under the project folder terminal, type command rake:routes

                      api_v1_users GET        /api/v1/users(.:format)                       api/v1/users#index {:format=>:json}
                                   POST       /api/v1/users(.:format)                       api/v1/users#create {:format=>:json}
                       api_v1_user GET        /api/v1/users/:id(.:format)                   api/v1/users#show {:format=>:json}
                                   PATCH      /api/v1/users/:id(.:format)                   api/v1/users#update {:format=>:json}
                                   PUT        /api/v1/users/:id(.:format)                   api/v1/users#update {:format=>:json}
                                   DELETE     /api/v1/users/:id(.:format)                   api/v1/users#destroy {:format=>:json}
                 api_v1_categories GET        /api/v1/categories(.:format)                  api/v1/categories#index {:format=>:json}
                                   POST       /api/v1/categories(.:format)                  api/v1/categories#create {:format=>:json}
                   api_v1_category GET        /api/v1/categories/:id(.:format)              api/v1/categories#show {:format=>:json}
                                   PATCH      /api/v1/categories/:id(.:format)              api/v1/categories#update {:format=>:json}
                                   PUT        /api/v1/categories/:id(.:format)              api/v1/categories#update {:format=>:json}
                                   DELETE     /api/v1/categories/:id(.:format)              api/v1/categories#destroy {:format=>:json}
                  api_v1_medicines GET        /api/v1/medicines(.:format)                   api/v1/medicines#index {:format=>:json}
                                   POST       /api/v1/medicines(.:format)                   api/v1/medicines#create {:format=>:json}
                   api_v1_medicine GET        /api/v1/medicines/:id(.:format)               api/v1/medicines#show {:format=>:json}
                                   PATCH      /api/v1/medicines/:id(.:format)               api/v1/medicines#update {:format=>:json}
                                   PUT        /api/v1/medicines/:id(.:format)               api/v1/medicines#update {:format=>:json}
                                   DELETE     /api/v1/medicines/:id(.:format)               api/v1/medicines#destroy {:format=>:json}
            api_v1_inventory_items GET        /api/v1/inventory_items(.:format)             api/v1/inventory_items#index {:format=>:json}
             api_v1_inventory_item GET        /api/v1/inventory_items/:id(.:format)         api/v1/inventory_items#show {:format=>:json}
                                   PATCH      /api/v1/inventory_items/:id(.:format)         api/v1/inventory_items#update {:format=>:json}
                                   PUT        /api/v1/inventory_items/:id(.:format)         api/v1/inventory_items#update {:format=>:json}
               api_v1_transactions GET        /api/v1/transactions(.:format)                api/v1/transactions#index {:format=>:json}
                                   POST       /api/v1/transactions(.:format)                api/v1/transactions#create {:format=>:json}
                api_v1_transaction GET        /api/v1/transactions/:id(.:format)            api/v1/transactions#show {:format=>:json}
                                   PATCH      /api/v1/transactions/:id(.:format)            api/v1/transactions#update {:format=>:json}
                                   PUT        /api/v1/transactions/:id(.:format)            api/v1/transactions#update {:format=>:json}
                                   DELETE     /api/v1/transactions/:id(.:format)            api/v1/transactions#destroy {:format=>:json}
                   api_v1_receipts GET        /api/v1/receipts(.:format)                    api/v1/receipts#index {:format=>:json}
                                   POST       /api/v1/receipts(.:format)                    api/v1/receipts#create {:format=>:json}
                    api_v1_receipt GET        /api/v1/receipts/:id(.:format)                api/v1/receipts#show {:format=>:json}
              api_v1_configuration GET        /api/v1/configurations/:id(.:format)          api/v1/configurations#show {:format=>:json}
                api_v1_med_batches GET        /api/v1/med_batches(.:format)                 api/v1/med_batches#index {:format=>:json}


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
